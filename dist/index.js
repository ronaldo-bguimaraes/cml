(()=>{"use strict";var E;!function(E){E[E.DOCTYPE=0]="DOCTYPE",E[E.CHILDREN=1]="CHILDREN",E[E.ATTRIBUTE=2]="ATTRIBUTE",E[E.EQUAL=3]="EQUAL",E[E.VALUE=4]="VALUE",E[E.OPEN_BRACE=5]="OPEN_BRACE"}(E||(E={})),new Map,new DOMParser})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,