(()=>{"use strict";var e={d:(t,r)=>{for(var n in r)e.o(r,n)&&!e.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:r[n]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r:e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})}},t={};e.r(t),e.d(t,{transpile:()=>p});const r={get STRING(){return new RegExp("(\"(?:.*?)\"|'(?:.*?)')")},get DOCTYPE(){return new RegExp("(!doctype)","i")},get WORD(){return new RegExp("(\\b(?:[\\w-]+)\\b)")},get MODULE(){return new RegExp(`(@${this.WORD.source})`)},get KEYWORD(){return new RegExp(`(\\$${this.WORD.source})`)},get TAG(){return new RegExp(`(${this.DOCTYPE.source}|${this.WORD.source}|${this.MODULE.source})`,"i")},get OPEN_BRACKET(){return new RegExp("(\\[)")},get CLOSE_BRACKET(){return new RegExp("(\\])")},get BRACKETS(){return new RegExp(`(${this.OPEN_BRACKET.source}|${this.CLOSE_BRACKET.source})`)},get OPEN_BRACE(){return new RegExp("({)")},get CLOSE_BRACE(){return new RegExp("(})")},get BRACES(){return new RegExp(`(${this.OPEN_BRACE.source}|${this.CLOSE_BRACE.source})`)},get EQUAL(){return new RegExp("(=)")},get NEW_LINE(){return new RegExp("(\\n)")},get MATCH(){return new RegExp(`(${this.STRING.source}|${this.TAG.source}|${this.KEYWORD.source}|${this.BRACKETS.source}|${this.BRACES.source}|${this.EQUAL.source}|${this.NEW_LINE.source})`,"gi")}},n={get STRING(){return new RegExp(`^${r.STRING.source}$`)},get DOCTYPE(){return new RegExp(`^${r.DOCTYPE.source}$`,"i")},get WORD(){return new RegExp(`^${r.WORD.source}$`)},get MODULE(){return new RegExp(`^${r.MODULE.source}$`)},get KEYWORD(){return new RegExp(`^${r.KEYWORD.source}$`)},get TAG(){return new RegExp(`^${r.TAG.source}$`,"i")},get OPEN_BRACKET(){return new RegExp(`^${r.OPEN_BRACKET.source}$`)},get CLOSE_BRACKET(){return new RegExp(`^${r.CLOSE_BRACKET.source}$`)},get BRACKETS(){return new RegExp(`^${r.BRACKETS.source}$`)},get OPEN_BRACE(){return new RegExp(`^${r.OPEN_BRACE.source}$`)},get CLOSE_BRACE(){return new RegExp(`^${r.CLOSE_BRACE.source}$`)},get BRACES(){return new RegExp(`^${r.BRACES.source}$`)},get EQUAL(){return new RegExp(`^${r.EQUAL.source}$`)},get NEW_LINE(){return new RegExp(`^${r.NEW_LINE.source}$`)},get MATCH(){return new RegExp(`^${r.MATCH.source}$`,"gi")}};var E;!function(e){e[e.DOCTYPE=0]="DOCTYPE",e[e.CHILDREN=1]="CHILDREN",e[e.ATTRIBUTE=2]="ATTRIBUTE",e[e.EQUAL=3]="EQUAL",e[e.VALUE=4]="VALUE",e[e.OPEN_BRACE=5]="OPEN_BRACE"}(E||(E={}));class s{name;attributes=new Map;children=[];parent;constructor(e){this.name=e}appendChild(e){return this.children.push(e),e instanceof s&&(e.parent=this),e}get root(){return void 0!==this.parent?this.parent.root:this}}const o=new Map;function i(e,t){for(const r of e.children)if("$children"===r){const n=e.children.indexOf(r);e.children.splice(n,1,...t)}}function u(e,t){for(const r of e.children)if(r instanceof s)if(/^(declare)$/.test(r.name))u(r,!0),e.children=e.children.filter((e=>e!==r));else if(n.MODULE.test(r.name))if(void 0===t||!0===t)o.set(r.name,r);else{const t=o.get(r.name);if(void 0===t)throw new Error(`Module ${r.name} not found!`);{const n=t.children[0];if(n instanceof s){const t=new s(n.name);for(const e of n.attributes)t.attributes.set(e[0],e[1]);for(const e of r.attributes)t.attributes.set(e[0],e[1]);for(const e of n.children)t.children.push(e);t.parent=r.parent,i(t,r.children);const E=e.children.indexOf(r);e.children.splice(E,1,t)}}}else u(r,!1);return e}const c=new RegExp("^(!doctype|area|base|br|col|command|embed|hr|img|input|keygen|link|meta|param|source|track|wbr)$","i");function R(e){const t=[],r=[];for(const r of e.children)t.push(r instanceof s?R(r):r);for(const t of e.attributes)r.push(` ${t[0]}${t[1]?`=${t[1]}`:""}`);return void 0!==e.parent?`<${e.name}${r.join("")}>${c.test(e.name)?"":`${t.join("")}</${e.name}>`}`:`${t.join("")}`}function p(e){return R(u(function(e){let t,r=E.DOCTYPE,o=new s("document"),i=!1;function u(e){const t=new s(e);o=o.appendChild(t),r=E.ATTRIBUTE}function c(){void 0!==o.parent&&(o=o.parent)}for(const s of e)r===E.DOCTYPE?n.TAG.test(s)&&u(s):r===E.CHILDREN?n.STRING.test(s)?o.appendChild(s.slice(1,-1)):n.KEYWORD.test(s)?o.appendChild(s):n.TAG.test(s)?u(s):n.CLOSE_BRACE.test(s)&&c():r===E.OPEN_BRACE?n.OPEN_BRACE.test(s)?r=E.CHILDREN:(c(),n.KEYWORD.test(s)?o.appendChild(s):n.STRING.test(s)?o.appendChild(s.slice(1,-1)):n.TAG.test(s)&&u(s)):r===E.ATTRIBUTE?n.WORD.test(s)?(t=s,o.attributes.set(t,void 0),r=E.EQUAL):n.NEW_LINE.test(s)&&!1===i?r=E.OPEN_BRACE:n.OPEN_BRACE.test(s)?r=E.CHILDREN:n.OPEN_BRACKET.test(s)?i=!0:n.CLOSE_BRACKET.test(s)&&(i=!1):r===E.EQUAL?n.EQUAL.test(s)?r=E.VALUE:n.WORD.test(s)?(t=s,o.attributes.set(t,void 0),r=E.EQUAL):n.NEW_LINE.test(s)&&(r=E.OPEN_BRACE):r===E.VALUE&&(n.STRING.test(s)?(void 0!==t&&o.attributes.set(t,s),r=E.ATTRIBUTE):n.NEW_LINE.test(s)&&(c(),r=E.CHILDREN));return o.root}(function(e){const t=[],n=e.matchAll(r.MATCH);for(const e of n)t.push(e[0]);return t}(e))))}var g=exports;for(var C in t)g[C]=t[C];t.__esModule&&Object.defineProperty(g,"__esModule",{value:!0})})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,